# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish to NuGet
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        # Wenn du eine global.json hast, wird die Version automatisch erkannt.
        # with:
        #   dotnet-version: '8.0.x' 

      - name: Restore dependencies
        run: dotnet restore S7UaLib/S7UaLib.csproj
      
      - name: Build
        run: dotnet build S7UaLib/S7UaLib.csproj --configuration Release --no-restore
    
      - name: Test
        # Führt Tests aus, die nicht als "Integration" markiert sind
        run: dotnet test --no-build --verbosity normal --filter "Category!=Integration"

  create_nuget:
    name: Create NuGet Package
    runs-on: windows-latest
    # Dieser Job muss nicht auf die Tests warten, er kann parallel laufen.
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Nötig für Versionierungstools wie MinVer

    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Create NuGet package
      # dotnet pack führt implizit einen build aus. 
      # Du könntest --no-build hinzufügen, wenn du sicherstellen willst,
      # dass ein vorheriger Build-Schritt verwendet wird.
      run: dotnet pack S7UaLib/S7UaLib.csproj --configuration Release --output ${{ env.NuGetDirectory }}

    - name: Publish NuGet artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  deploy_nuget:
    name: Deploy to NuGet.org
    runs-on: windows-latest
    # FIX: Füge BEIDE Jobs als Abhängigkeit hinzu
    needs: [ build_and_test, create_nuget ] 
    
    # BEST PRACTICE: Nur bei einem echten Release deployen, nicht bei manuellen Tests.
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package # Name muss mit dem Upload-Job übereinstimmen
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Display structure of downloaded files
        run: Get-ChildItem -Path ${{ env.NuGetDirectory }} -Recurse

      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --skip-duplicate --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json 
          }